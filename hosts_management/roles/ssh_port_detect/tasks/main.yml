---

- name: test default ssh port
  local_action: wait_for port=22 timeout=5 host={{ansible_host}}
  register: default_ssh
  ignore_errors: true
  tags:
    - ssh_port_detect.config.port.test_default

- name: set ansible_port to default if default port is active
  set_fact: ansible_port=22
  when: default_ssh.elapsed < 5
  tags:
    - ssh_port_detect.config.port.set_default

- name: test ssh on high port
  local_action: wait_for port={{custom_ssh_port}} timeout=5 host={{ansible_host}}
  register: high_ssh
  ignore_errors: true
  tags:
    - ssh_port_detect.config.port.test_high

- name: set ansible_port to custom if custom port is active
  set_fact: ansible_port={{custom_ssh_port}}
  when: default_ssh.elapsed >= 5 and high_ssh.elapsed < 5
  tags:
    - ssh_port_detect.config.port.set_custom

- name: first remove the host from our known hosts list as we might have re-spun the hosts
  local_action: lineinfile dest="{{local_known_hosts_file}}" state=absent regexp="{{ansible_host}}"
  tags:
    - ssh_port_detect.known_hosts.key.remove

- name: retrieve public host key for the host
  local_action: command ssh-keyscan -p {{ansible_port}} -t ecdsa {{ansible_host}}
  register: new_host_key
  tags:
    - ssh_port_detect.known_hosts.key.retrieve

- name: add the new host key for the host to our known hosts list
  local_action: lineinfile dest="{{local_known_hosts_file}}" state=present regexp="{{ansible_host}}" line="{{new_host_key.stdout}}"
  tags:
    - ssh_port_detect.known_hosts.key.add
